node n1 {
    type router
    model router
    network-config {
	hostname R3
	!
	interface eth3
	 mac address 34:BA:01:B0:19:1C
	 ip address 192.168.2.100/24
	!
	interface eth0
	 ip address 10.0.0.1/24
	 ipv6 address 2001:0::1/64
	!
	interface eth2
	 ip address 10.0.5.1/24
	!
	interface eth1
	 ip address 10.0.4.2/24
	!
    }
    canvas c1
    iconcoords {817.0 292.0}
    labelcoords {827.0 269.0}
    interface-peer {eth1 n6}
    interface-peer {eth2 n16}
    services {IPForward StaticRoute}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	route add -net 10.0.1.0 netmask 255.255.255.0 gw 10.0.4.1 dev eth1
	route add -net 10.0.2.0 netmask 255.255.255.0 gw 10.0.4.1 dev eth1
	route add -net 10.0.8.0 netmask 255.255.255.0 gw 10.0.4.1 dev eth1
	route add -net 10.0.6.0 netmask 255.255.255.0 gw 10.0.4.1 dev eth1
	route add -net 10.0.7.0 netmask 255.255.255.0 gw 10.0.5.2 dev eth2
	route add -net 192.168.42.0 netmask 255.255.255.0 gw 10.0.5.2 dev eth2
	
	
	#/sbin/ip route add 10.0.2.0/24 via 10.0.4.2
	#/sbin/ip route add 10.0.6.0/24 via 10.0.4.2
	#/sbin/ip route add 10.0.1.0/24 via 10.0.4.2
	#/sbin/ip route add 10.0.3.0/24 via 10.0.5.1
	#/sbin/ip route add 10.0.7.0/24 via 10.0.5.1
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('tcpdump.sh', )
	cmdup=('sh tcpdump.sh', )
	cmddown=('killall tcpdump', )
	cmdval=('pidof tcpdump', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:tcpdump.sh
	custom-command tcpdump.sh
	config {
	file:///home/fidelis/.core/configs/tcpdump.sh
	}
    }
    custom-config {
	custom-config-id service:IPForward
	custom-command IPForward
	config {
	files=('ipforward.sh', )
	}
    }
    custom-config {
	custom-config-id service:IPForward:ipforward.sh
	custom-command ipforward.sh
	config {
	#!/bin/sh
	# auto-generated by IPForward service (utility.py)
	/sbin/sysctl -w net.ipv4.conf.all.forwarding=1
	/sbin/sysctl -w net.ipv6.conf.all.forwarding=1
	/sbin/sysctl -w net.ipv6.conf.all.disable_ipv6=1
	/sbin/sysctl -w net.ipv6.conf.default.disable_ipv6=1
	/sbin/sysctl -w net.ipv4.conf.all.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.all.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.default.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.eth0.forwarding=1
	/sbin/sysctl -w net.ipv4.conf.eth0.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.eth0.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.eth1.forwarding=1
	/sbin/sysctl -w net.ipv4.conf.eth1.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.eth1.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.eth2.forwarding=1
	/sbin/sysctl -w net.ipv4.conf.eth2.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.eth2.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.eth3.forwarding=1
	/sbin/sysctl -w net.ipv4.conf.eth3.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.eth3.rp_filter=0
	
	}
    }
    custom-config {
	custom-config-id service:DHCPClient
	custom-command DHCPClient
	config {
	files=('startdhcpclient.sh', )
	}
    }
    custom-config {
	custom-config-id service:DHCPClient:startdhcpclient.sh
	custom-command startdhcpclient.sh
	config {
	#!/bin/sh
	# auto-generated by DHCPClient service (utility.py)
	# uncomment this mkdir line and symlink line to enable client-side DNS
	# resolution based on the DHCP server response.
	#mkdir -p /var/run/resolvconf/interface
	#ln -s /var/run/resolvconf/interface/eth0.dhclient /var/run/resolvconf/resolv.conf
	#/sbin/dhclient -nw -pf /var/run/dhclient-eth0.pid -lf /var/run/dhclient-eth0.lease eth0
	#ln -s /var/run/resolvconf/interface/eth1.dhclient /var/run/resolvconf/resolv.conf
	#/sbin/dhclient -nw -pf /var/run/dhclient-eth1.pid -lf /var/run/dhclient-eth1.lease eth1
	#ln -s /var/run/resolvconf/interface/eth2.dhclient /var/run/resolvconf/resolv.conf
	#/sbin/dhclient -nw -pf /var/run/dhclient-eth2.pid -lf /var/run/dhclient-eth2.lease eth2
	#ln -s /var/run/resolvconf/interface/eth3.dhclient /var/run/resolvconf/resolv.conf
	/sbin/dhclient -nw -pf /var/run/dhclient-eth3.pid -lf /var/run/dhclient-eth3.lease eth3
	
	}
    }
    custom-config {
	custom-config-id service:DHCP
	custom-command DHCP
	config {
	files=('/etc/dhcp/dhcpd.conf', )
	}
    }
    custom-config {
	custom-config-id service:DHCP:/etc/dhcp/dhcpd.conf
	custom-command /etc/dhcp/dhcpd.conf
	config {
	# auto-generated by DHCP service (utility.py)
	# NOTE: move these option lines into the desired pool { } block(s) below
	#option domain-name "test.com";
	#option domain-name-servers 10.0.0.1;
	#option routers 10.0.0.1;
	
	log-facility local6;
	
	default-lease-time 600;
	max-lease-time 7200;
	
	ddns-update-style none;
	
	subnet 10.0.0.0 netmask 255.255.255.0 {
	  pool {
	    range 10.0.0.127 10.0.0.254;
	    default-lease-time 600;
	    option routers 10.0.0.1;
	  }
	}
	
	
	
	
	}
    }
    interface-peer {eth0 n2}
    interface-peer {eth3 n10}
}

node n6 {
    type router
    model router
    network-config {
	hostname R1
	!
	interface eth2
	 ip address 10.0.2.1/24
	 ipv6 address 2001:1::1/64
	!
	interface eth1
	 ip address 10.0.6.1/24
	!
	interface eth0
	 ip address 10.0.4.1/24
	!
    }
    canvas c1
    iconcoords {711.0 166.0}
    labelcoords {707.0 145.0}
    interface-peer {eth0 n1}
    interface-peer {eth1 n17}
    services {IPForward StaticRoute}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#route add -net 10.0.2.0 netmask 255.255.255.0 dev eth2
	
	route add -net 10.0.1.0 netmask 255.255.255.0 gw 10.0.6.2 dev eth1
	route add -net 10.0.7.0 netmask 255.255.255.0 gw 10.0.6.2 dev eth1
	route add -net 10.0.3.0 netmask 255.255.255.0 gw 10.0.6.2 dev eth1
	route add -net 10.0.0.0 netmask 255.255.255.0 gw 10.0.4.2 dev eth0
	route add -net 10.0.5.0 netmask 255.255.255.0 gw 10.0.4.2 dev eth0
	route add -net 10.0.8.0 netmask 255.255.255.0 gw 10.0.6.2 dev eth1
	route add -net 192.168.2.0 netmask 255.255.255.0 gw 10.0.4.2 dev eth0
	route add -net 192.168.42.0 netmask 255.255.255.0 gw 10.0.6.2 dev eth1
	
	
	
	
	
	
	#/sbin/ip route add 10.0.1.0/24 via 10.0.6.1
	#/sbin/ip route add 10.0.7.0/24 via 10.0.6.1
	#/sbin/ip route add 10.0.3.0/24 via 10.0.6.1
	#/sbin/ip route add 10.0.0.0/24 via 10.0.4.1
	#/sbin/ip route add 10.0.5.0/24 via 10.0.4.1
	
	}
    }
    custom-config {
	custom-config-id service:DHCP
	custom-command DHCP
	config {
	files=('/etc/dhcp/dhcpd.conf', )
	}
    }
    custom-config {
	custom-config-id service:DHCP:/etc/dhcp/dhcpd.conf
	custom-command /etc/dhcp/dhcpd.conf
	config {
	file:///etc/dhcp/dhcpd.conf
	}
    }
    custom-config {
	custom-config-id service:IPForward
	custom-command IPForward
	config {
	files=('ipforward.sh', )
	}
    }
    custom-config {
	custom-config-id service:IPForward:ipforward.sh
	custom-command ipforward.sh
	config {
	#!/bin/sh
	# auto-generated by IPForward service (utility.py)
	/sbin/sysctl -w net.ipv4.conf.all.forwarding=1
	/sbin/sysctl -w net.ipv6.conf.all.forwarding=1
	/sbin/sysctl -w net.ipv6.conf.all.disable_ipv6=1
	/sbin/sysctl -w net.ipv6.conf.default.disable_ipv6=1
	/sbin/sysctl -w net.ipv4.conf.all.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.all.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.default.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.eth0.forwarding=1
	/sbin/sysctl -w net.ipv4.conf.eth0.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.eth0.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.eth1.forwarding=1
	/sbin/sysctl -w net.ipv4.conf.eth1.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.eth1.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.eth2.forwarding=1
	/sbin/sysctl -w net.ipv4.conf.eth2.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.eth2.rp_filter=0
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	route add default gw 10.0.6.2 dev eth1
	route add default gw 10.0.4.2 dev eth0
	
	}
    }
    interface-peer {eth2 n4}
}

node n16 {
    type router
    model router
    network-config {
	hostname R2
	!
	interface eth2
	!
	interface eth1
	 ip address 10.0.7.2/24
	!
	interface eth0
	 ip address 10.0.5.2/24
	!
    }
    canvas c1
    iconcoords {707.0 459.0}
    labelcoords {709.0 425.0}
    interface-peer {eth0 n1}
    interface-peer {eth1 n17}
    services {IPForward StaticRoute DHCPClient Firewall}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	route add -net 10.0.1.0 netmask 255.255.255.0 gw 10.0.7.1 dev eth1
	route add -net 10.0.6.0 netmask 255.255.255.0 gw 10.0.7.1 dev eth1
	route add -net 10.0.8.0 netmask 255.255.255.0 gw 10.0.7.1 dev eth1
	route add -net 10.0.2.0 netmask 255.255.255.0 gw 10.0.7.1 dev eth1
	route add -net 10.0.3.0 netmask 255.255.255.0 gw 10.0.7.1 dev eth1
	route add -net 10.0.0.0 netmask 255.255.255.0 gw 10.0.5.1 dev eth0
	route add -net 10.0.4.0 netmask 255.255.255.0 gw 10.0.5.1 dev eth0
	route add -net 192.168.2.0 netmask 255.255.255.0 gw 10.0.5.1 dev eth0
	
	
	
	#/sbin/ip route add 10.0.1.0/24 via 10.0.7.2
	#/sbin/ip route add 10.0.2.0/24 via 10.0.7.2
	#/sbin/ip route add 10.0.6.0/24 via 10.0.7.2
	#/sbin/ip route add 10.0.4.0/24 via 10.0.5.2
	#/sbin/ip route add 10.0.0.0/24 via 10.0.5.2
	
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('tcpdump.sh', )
	cmdup=('sh tcpdump.sh', )
	cmddown=('killall tcpdump', )
	cmdval=('pidof tcpdump', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:tcpdump.sh
	custom-command tcpdump.sh
	config {
	file:///home/fidelis/.core/configs/tcpdump.sh
	}
    }
    custom-config {
	custom-config-id service:DHCPClient
	custom-command DHCPClient
	config {
	files=('startdhcpclient.sh', )
	}
    }
    custom-config {
	custom-config-id service:DHCPClient:startdhcpclient.sh
	custom-command startdhcpclient.sh
	config {
	#!/bin/sh
	# auto-generated by DHCPClient service (utility.py)
	# uncomment this mkdir line and symlink line to enable client-side DNS
	# resolution based on the DHCP server response.
	#mkdir -p /var/run/resolvconf/interface
	#ln -s /var/run/resolvconf/interface/eth0.dhclient /var/run/resolvconf/resolv.conf
	#/sbin/dhclient -nw -pf /var/run/dhclient-eth0.pid -lf /var/run/dhclient-eth0.lease eth0
	#ln -s /var/run/resolvconf/interface/eth1.dhclient /var/run/resolvconf/resolv.conf
	#/sbin/dhclient -nw -pf /var/run/dhclient-eth1.pid -lf /var/run/dhclient-eth1.lease eth1
	#ln -s /var/run/resolvconf/interface/eth2.dhclient /var/run/resolvconf/resolv.conf
	/sbin/dhclient -nw -pf /var/run/dhclient-eth2.pid -lf /var/run/dhclient-eth2.lease eth2
	
	}
    }
    custom-config {
	custom-config-id service:Firewall
	custom-command Firewall
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('iptables.sh', )
	cmdup=('sh iptables.sh', )
	}
    }
    custom-config {
	custom-config-id service:Firewall:iptables.sh
	custom-command iptables.sh
	config {
	file:///home/fidelis/.core/configs/iptables.sh
	}
    }
    custom-config {
	custom-config-id service:IPForward
	custom-command IPForward
	config {
	files=('ipforward.sh', )
	}
    }
    custom-config {
	custom-config-id service:IPForward:ipforward.sh
	custom-command ipforward.sh
	config {
	#!/bin/sh
	# auto-generated by IPForward service (utility.py)
	/sbin/sysctl -w net.ipv4.conf.all.forwarding=1
	/sbin/sysctl -w net.ipv6.conf.all.forwarding=1
	/sbin/sysctl -w net.ipv6.conf.all.disable_ipv6=1
	/sbin/sysctl -w net.ipv6.conf.default.disable_ipv6=1
	/sbin/sysctl -w net.ipv4.conf.all.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.all.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.default.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.eth0.forwarding=1
	/sbin/sysctl -w net.ipv4.conf.eth0.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.eth0.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.eth1.forwarding=1
	/sbin/sysctl -w net.ipv4.conf.eth1.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.eth1.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.eth2.forwarding=1
	/sbin/sysctl -w net.ipv4.conf.eth2.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.eth2.rp_filter=0
	
	}
    }
    custom-config {
	custom-config-id service:DHCP
	custom-command DHCP
	config {
	files=('/etc/dhcp/dhcpd.conf', )
	}
    }
    custom-config {
	custom-config-id service:DHCP:/etc/dhcp/dhcpd.conf
	custom-command /etc/dhcp/dhcpd.conf
	config {
	# auto-generated by DHCP service (utility.py)
	# NOTE: move these option lines into the desired pool { } block(s) below
	#option domain-name "test.com";
	#option domain-name-servers 10.0.0.1;
	#option routers 10.0.0.1;
	
	log-facility local6;
	
	default-lease-time 600;
	max-lease-time 7200;
	
	ddns-update-style none;
	
	subnet 10.0.3.0 netmask 255.255.255.0 {
	  pool {
	    range 10.0.3.100 10.0.3.254;
	    default-lease-time 600;
	    option routers 10.0.3.1;
	  }
	}
	
	
	
	}
    }
    interface-peer {eth2 n5}
}

node n17 {
    type router
    model router
    network-config {
	hostname R0
	!
	interface eth3
	 ip address 10.0.3.1/24
	 ipv6 address 2001:3::1/64
	!
	interface eth2
	 ip address 10.0.1.1/24
	 ipv6 address 2001:2::1/64
	!
	interface eth4
	 ip address 10.0.8.1/24
	 ipv6 address 2001:4::1/64
	!
	interface eth1
	 ip address 10.0.7.1/24
	!
	interface eth0
	 ip address 10.0.6.2/24
	!
    }
    canvas c1
    iconcoords {594.0 328.0}
    labelcoords {590.0 306.0}
    interface-peer {eth0 n6}
    interface-peer {eth1 n16}
    services {IPForward StaticRoute}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#route add default gw 10.0.6.1 dev eth0
	route add -net 10.0.2.0 netmask 255.255.255.0 gw 10.0.6.1 dev eth0
	route add -net 10.0.4.0 netmask 255.255.255.0 gw 10.0.6.1 dev eth0
	route add -net 10.0.0.0 netmask 255.255.255.0 gw 10.0.6.1 dev eth0
	route add -net 192.168.2.0 netmask 255.255.255.0 gw 10.0.6.1 dev eth0
	route add -net 10.0.7.0 netmask 255.255.255.0 gw 10.0.7.2 dev eth1
	route add -net 10.0.5.0 netmask 255.255.255.0 gw 10.0.7.2 dev eth1
	route add -net 192.168.42.0 netmask 255.255.255.0 gw 10.0.7.2 dev eth1
	
	
	
	
	#/sbin/ip route add 10.0.2.0/24 via 10.0.6.1
	#/sbin/ip route add 10.0.4.0/24 via 10.0.6.1
	#/sbin/ip route add 10.0.3.0/24 via 10.0.7.2
	#/sbin/ip route add 10.0.5.0/24 via 10.0.7.2
	#/sbin/ip route add 10.0.0.0/24 via 10.0.7.2
	
	}
    }
    custom-config {
	custom-config-id service:IPForward
	custom-command IPForward
	config {
	files=('ipforward.sh', )
	}
    }
    custom-config {
	custom-config-id service:IPForward:ipforward.sh
	custom-command ipforward.sh
	config {
	#!/bin/sh
	# auto-generated by IPForward service (utility.py)
	/sbin/sysctl -w net.ipv4.conf.all.forwarding=1
	/sbin/sysctl -w net.ipv6.conf.all.forwarding=1
	/sbin/sysctl -w net.ipv6.conf.all.disable_ipv6=1
	/sbin/sysctl -w net.ipv6.conf.default.disable_ipv6=1
	/sbin/sysctl -w net.ipv4.conf.all.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.all.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.default.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.eth0.forwarding=1
	/sbin/sysctl -w net.ipv4.conf.eth0.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.eth0.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.eth1.forwarding=1
	/sbin/sysctl -w net.ipv4.conf.eth1.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.eth1.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.eth2.forwarding=1
	/sbin/sysctl -w net.ipv4.conf.eth2.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.eth2.rp_filter=0
	
	}
    }
    custom-config {
	custom-config-id service:DHCP
	custom-command DHCP
	config {
	files=('/etc/dhcp/dhcpd.conf', )
	}
    }
    custom-config {
	custom-config-id service:DHCP:/etc/dhcp/dhcpd.conf
	custom-command /etc/dhcp/dhcpd.conf
	config {
	# auto-generated by DHCP service (utility.py)
	# NOTE: move these option lines into the desired pool { } block(s) below
	#option domain-name "test.com";
	#option domain-name-servers 10.0.0.1;
	#option routers 10.0.0.1;
	
	log-facility local6;
	
	default-lease-time 600;
	max-lease-time 7200;
	
	ddns-update-style none;
	
	
	subnet 10.0.1.0 netmask 255.255.255.0 {
	  pool {
	    range 10.0.1.100 10.0.1.254;
	    default-lease-time 600;
	    option routers 10.0.1.1;
	  }
	}
	
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	#ip route add default via 10.0.6.1
	#ip route add default via 10.0.7.1
	#ip route add default via 10.0.1.1
	route add default dev eth2
	
	}
    }
    interface-peer {eth4 n3}
    interface-peer {eth2 n32}
    interface-peer {eth3 n34}
}

node n2 {
    type router
    model host
    network-config {
	hostname Teste
	!
	interface eth0
	 ip address 10.0.0.10/24
	!
    }
    canvas c1
    iconcoords {931.0 111.0}
    labelcoords {998.0 119.0}
    interface-peer {eth0 n1}
    services {DefaultRoute StaticRoute HTTP UserDefined}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('index.html', )
	cmdup=('cd var.www && cp /var/www/html/lj.webm .', 'cp index.html .', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:index.html
	custom-command index.html
	config {
	file:///home/fidelis/.core/configs/index.html
	}
    }
    custom-config {
	custom-config-id service:HTTP
	custom-command HTTP
	config {
	dirs=('/etc/apache2', '/var/run/apache2', '/var/log/apache2', '/var/lock/apache2', '/var/www', '/run/lock', )
	files=('/etc/apache2/apache2.conf', '/etc/apache2/envvars', '/var/www/index.html', )
	}
    }
    custom-config {
	custom-config-id service:HTTP:/etc/apache2/apache2.conf
	custom-command /etc/apache2/apache2.conf
	config {
	# apache2.conf generated by utility.py:HttpService
	Mutex file:${APACHE_LOCK_DIR} default
	PidFile ${APACHE_PID_FILE}
	Timeout 300
	KeepAlive On
	MaxKeepAliveRequests 500
	KeepAliveTimeout 5
	LoadModule mpm_worker_module /usr/lib/apache2/modules/mod_mpm_worker.so
	
	<IfModule mpm_prefork_module>
	    StartServers          5
	    MinSpareServers       5
	    MaxSpareServers      10
	    MaxClients          1000
	    MaxRequestsPerChild   0
	</IfModule>
	
	<IfModule mpm_worker_module>
	    StartServers          2
	    MinSpareThreads      25
	    MaxSpareThreads      75 
	    ThreadLimit          64
	    ThreadsPerChild      25
	    MaxClients          1000
	    MaxRequestsPerChild   0
	</IfModule>
	
	<IfModule mpm_event_module>
	    StartServers          2
	    MinSpareThreads      25
	    MaxSpareThreads      75 
	    ThreadLimit          64
	    ThreadsPerChild      25
	    MaxClients          1000
	    MaxRequestsPerChild   0
	</IfModule>
	
	User ${APACHE_RUN_USER}
	Group ${APACHE_RUN_GROUP}
	
	AccessFileName .htaccess
	
	<Files ~ "^\.ht">
	    Require all denied
	</Files>
	
	DefaultType None
	
	HostnameLookups Off
	
	ErrorLog ${APACHE_LOG_DIR}/error.log
	LogLevel warn
	
	#Include mods-enabled/*.load
	#Include mods-enabled/*.conf
	LoadModule alias_module /usr/lib/apache2/modules/mod_alias.so
	LoadModule auth_basic_module /usr/lib/apache2/modules/mod_auth_basic.so
	LoadModule authz_core_module /usr/lib/apache2/modules/mod_authz_core.so
	LoadModule authz_host_module /usr/lib/apache2/modules/mod_authz_host.so
	LoadModule authz_user_module /usr/lib/apache2/modules/mod_authz_user.so
	LoadModule autoindex_module /usr/lib/apache2/modules/mod_autoindex.so
	LoadModule dir_module /usr/lib/apache2/modules/mod_dir.so
	LoadModule env_module /usr/lib/apache2/modules/mod_env.so
	LoadModule status_module /usr/lib/apache2/modules/mod_status.so
	
	NameVirtualHost *:80
	Listen 80
	
	<IfModule mod_ssl.c>
	    Listen 443
	</IfModule>
	<IfModule mod_gnutls.c>
	    Listen 443
	</IfModule>
	
	
	<IfModule mod_status.c>
	        # Allow server status reports generated by mod_status,
	        # with the URL of http://servername/server-status
	        # Uncomment and change the "192.0.2.0/24" to allow access from other hosts.
	
	        <Location /server-status>
	                SetHandler server-status
	        </Location>
	
	        # Keep track of extended status information for each request
	        ExtendedStatus On
	
	        # Determine if mod_status displays the first 63 characters of a request or
	        # the last 63, assuming the request itself is greater than 63 chars.
	        # Default: Off
	        #SeeRequestTail On
	
	
	        <IfModule mod_proxy.c>
	                # Show Proxy LoadBalancer status in mod_status
	                #ProxyStatus On
	        </IfModule>
	
	
	</IfModule>
	
	
	LogFormat "%v:%p %h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" vhost_combined
	LogFormat "%h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" combined
	LogFormat "%h %l %u %t \"%r\" %>s %O" common
	LogFormat "%{Referer}i -> %U" referer
	LogFormat "%{User-agent}i" agent
	
	ServerTokens OS
	ServerSignature On
	TraceEnable Off
	
	<VirtualHost *:80>
		ServerAdmin webmaster@localhost
		DocumentRoot /var/www
		<Directory />
			Options FollowSymLinks
			AllowOverride None
		</Directory>
		<Directory /var/www/>
			Options Indexes FollowSymLinks MultiViews
			AllowOverride None
			Require all granted
		</Directory>
		ErrorLog ${APACHE_LOG_DIR}/error.log
		LogLevel warn
		CustomLog ${APACHE_LOG_DIR}/access.log combined
	</VirtualHost>
	
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('tcpdump.sh', )
	cmdup=('sh tcpdump.sh', )
	cmddown=('killall tcpdump', )
	cmdval=('pidof tcpdump', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:tcpdump.sh
	custom-command tcpdump.sh
	config {
	file:///home/fidelis/.core/configs/tcpdump.sh
	}
    }
    custom-image /home/fidelis/.core/trace/imgs/forbidden.php.png
}

node n25 {
    type router
    model PC
    network-config {
	hostname DoMal
	!
	interface eth0
	 ip address 10.0.8.20/24
	 ipv6 address 2001:4::20/64
	!
    }
    canvas c1
    iconcoords {141.0 177.0}
    labelcoords {143.0 129.0}
    services {DefaultRoute UserDefined Firewall}
    custom-config {
	custom-config-id service:Firewall
	custom-command Firewall
	config {
	files=('status.sh', )
	cmdup=('sh status.sh', )
	cmddown=('killall status.sh', )
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:Firewall:status.sh
	custom-command status.sh
	config {
	#!/bin/bash
	
	#echo "" > /tmp/apache2.dat 
	printf "status\tctime\t\trtime\t\tuptime\tmemoria\tcpu\ttacc\ttkb\n" > /tmp/apache2.dat 
	
	for x in `seq 1 1 305`
	do
	
	# monit
	lynx -dump -error_file=/tmp/x$$ http://192.168.2.99:2812 &>/dev/null
	MONIT=`awk '/STATUS/{print $2}' /tmp/x$$ 2>/dev/null`
	if [ $? != 0 ]; then
	   	echo "site is down"
	        STATUS=`echo 0 | awk '{printf "%s\t", $1}'`
	        MEM=`echo 0 | awk '{printf "%s\t", $1}'`
	        CPU=`echo 0 | awk '{printf "%s\t", $1}'`
	        UPTIME=`uptime`
	else
	      MONIT=$(lynx -dump http://192.168.2.99:2812 2>&1 | grep '\[7]') 
	      
	      STATUS=`echo $MONIT | awk '{print $2}'`
	      if [ $STATUS = "OK" ]
	      then 
	          STATUS=`echo 1 | awk '{printf "%s\t", $1}'`
	          MEM=`echo $MONIT | awk '{printf "%s\t", $6}'`
		  CPU=`echo $MONIT | awk '{printf "%s\t", $5}'`
	      else
	          STATUS=`echo 0 | awk '{printf "%s\t", $1}'`
	          MEM=`echo 0 | awk '{printf "%s\t", $1}'`
		  CPU=`echo 0 | awk '{printf "%s\t", $1}'`
	      fi
	      
		# echo '' >> svstatus.dat && 
		SRVSTATUS=$(lynx -dump http://192.168.2.99/server-status?auto 2>&1) # | grep Load | awk '{print $2}' | perl -p -e 's/\n/ $2/')
	
		UPTIME=`printf %s "$SRVSTATUS" | grep '[U]ptime' | tail -n 1 | awk '{printf "%s\t", $2}'`
		TACC=`printf %s "$SRVSTATUS" | grep '[T]otal' | grep -m1 -e "Acc" | awk '{printf "%s\t", $3}'`
		TKB=`printf %s "$SRVSTATUS" | grep '[T]otal' | grep -m1 -e "kB" | awk '{printf "%s\t", $3}'`
		CTIME=`printf %s "$SRVSTATUS" | grep '[T]ime' | grep -m1 -e "Curr" | awk '{printf "%s\t", $4}'`
		RTIME=`printf %s "$SRVSTATUS" | grep '[T]ime' | grep -m1 -e "Rest" | awk '{printf "%s\t", $4}'`
	
	        echo "$CTIME$MONIT" >> /tmp/monit2.dat
	        
	fi
	 echo "$STATUS$CTIME$RTIME$UPTIME$MEM$CPU$TACC$TKB" >> /tmp/apache2.dat
	sleep 1
	done
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('hping.sh', 'hulk.py', 'known_hosts.sh', )
	cmdup=('sh hping.sh', )
	cmddown=('killall hping3', )
	cmdval=('pidof hping', )
	meta=ddos
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:known_hosts.sh
	custom-command known_hosts.sh
	config {
	file:///home/fidelis/.core/configs/known_hots.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hulk.py
	custom-command hulk.py
	config {
	file:///home/fidelis/.core/configs/hulk.py
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hping.sh
	custom-command hping.sh
	config {
	file:///home/fidelis/.core/configs/hping.sh
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('syn.py', 'smurf.py', 'sf.py', )
	cmdup=
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:sf.py
	custom-command sf.py
	config {
	file:///home/fidelis/.core/configs/sf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:smurf.py
	custom-command smurf.py
	config {
	file:///home/fidelis/.core/configs/smurf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:syn.py
	custom-command syn.py
	config {
	file:///home/fidelis/.core/configs/syn.py
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
    custom-image /home/fidelis/.core/configs/hacker_cyber_crime-128.png
    interface-peer {eth0 n3}
}

node n5 {
    type lanswitch
    network-config {
	hostname S3
	!
    }
    canvas c1
    iconcoords {965.0 460.0}
    labelcoords {965.0 439.0}
    interface-peer {e0 n16}
    interface-peer {e1 n9}
    interface-peer {e2 n18}
}

node n4 {
    type lanswitch
    network-config {
	hostname S0
	!
    }
    canvas c1
    iconcoords {468.0 167.0}
    labelcoords {468.0 197.0}
    interface-peer {e6 n27}
    interface-peer {e7 n19}
    interface-peer {e0 n6}
    interface-peer {e1 n28}
    interface-peer {e2 n7}
    interface-peer {e3 n26}
    interface-peer {e4 n24}
    interface-peer {e5 n12}
}

node n9 {
    type rj45
    network-config {
	hostname enp0s29u1u3
	!
    }
    canvas c1
    iconcoords {1050.0 461.0}
    labelcoords {1138.0 477.0}
    interface-peer {0 n5}
    custom-image /home/fidelis/.core/trace/imgs/if_device-iPhone-smartphone-vertical-glyph_763248.png
}

node n10 {
    type rj45
    network-config {
	hostname enp1s0
	!
    }
    canvas c1
    iconcoords {1052.0 293.0}
    labelcoords {1127.0 266.0}
    interface-peer {0 n1}
    custom-image /home/fidelis/.core/trace/imgs/índice.png
}

node n7 {
    type router
    model PC
    network-config {
	hostname zumbi-4
	!
	interface eth0
	 ip address 10.0.2.21/24
	 ipv6 address 2001:1::21/64
	!
    }
    canvas c1
    iconcoords {408.0 56.0}
    labelcoords {408.0 29.0}
    services {DefaultRoute UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('hping.sh', 'hulk.py', 'known_hosts.sh', )
	cmdup=('sh hping.sh', )
	cmddown=('killall hping3', )
	cmdval=('pidof hping', )
	meta=ddos
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:known_hosts.sh
	custom-command known_hosts.sh
	config {
	file:///home/fidelis/.core/configs/known_hots.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hulk.py
	custom-command hulk.py
	config {
	file:///home/fidelis/.core/configs/hulk.py
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hping.sh
	custom-command hping.sh
	config {
	file:///home/fidelis/.core/configs/hping.sh
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('syn.py', 'smurf.py', 'sf.py', )
	cmdup=
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:sf.py
	custom-command sf.py
	config {
	file:///home/fidelis/.core/configs/sf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:smurf.py
	custom-command smurf.py
	config {
	file:///home/fidelis/.core/configs/smurf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:syn.py
	custom-command syn.py
	config {
	file:///home/fidelis/.core/configs/syn.py
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
    interface-peer {eth0 n4}
}

node n12 {
    type router
    model PC
    network-config {
	hostname zumbi-3
	!
	interface eth0
	 ip address 10.0.2.24/24
	 ipv6 address 2001:1::24/64
	!
    }
    canvas c1
    iconcoords {346.0 57.0}
    labelcoords {346.0 30.0}
    services {DefaultRoute UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('hping.sh', 'hulk.py', 'known_hosts.sh', )
	cmdup=('sh hping.sh', )
	cmddown=('killall hping3', )
	cmdval=('pidof hping', )
	meta=ddos
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:known_hosts.sh
	custom-command known_hosts.sh
	config {
	file:///home/fidelis/.core/configs/known_hots.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hulk.py
	custom-command hulk.py
	config {
	file:///home/fidelis/.core/configs/hulk.py
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hping.sh
	custom-command hping.sh
	config {
	file:///home/fidelis/.core/configs/hping.sh
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('syn.py', 'smurf.py', 'sf.py', )
	cmdup=
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:sf.py
	custom-command sf.py
	config {
	file:///home/fidelis/.core/configs/sf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:smurf.py
	custom-command smurf.py
	config {
	file:///home/fidelis/.core/configs/smurf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:syn.py
	custom-command syn.py
	config {
	file:///home/fidelis/.core/configs/syn.py
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
    interface-peer {eth0 n4}
}

node n13 {
    type router
    model PC
    network-config {
	hostname zumbi-9
	!
	interface eth0
	 ip address 10.0.1.21/24
	 ipv6 address 2001:2::21/64
	!
    }
    canvas c1
    iconcoords {228.0 294.0}
    labelcoords {228.0 267.0}
    services {DefaultRoute UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('hping.sh', 'hulk.py', 'known_hosts.sh', )
	cmdup=('sh hping.sh', )
	cmddown=('killall hping3', )
	cmdval=('pidof hping', )
	meta=ddos
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:known_hosts.sh
	custom-command known_hosts.sh
	config {
	file:///home/fidelis/.core/configs/known_hots.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hulk.py
	custom-command hulk.py
	config {
	file:///home/fidelis/.core/configs/hulk.py
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hping.sh
	custom-command hping.sh
	config {
	file:///home/fidelis/.core/configs/hping.sh
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('syn.py', 'smurf.py', 'sf.py', )
	cmdup=
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:sf.py
	custom-command sf.py
	config {
	file:///home/fidelis/.core/configs/sf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:smurf.py
	custom-command smurf.py
	config {
	file:///home/fidelis/.core/configs/smurf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:syn.py
	custom-command syn.py
	config {
	file:///home/fidelis/.core/configs/syn.py
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
    interface-peer {eth0 n32}
}

node n14 {
    type router
    model PC
    network-config {
	hostname zumbi-8
	!
	interface eth0
	 ip address 10.0.1.20/24
	 ipv6 address 2001:2::20/64
	!
    }
    canvas c1
    iconcoords {270.0 271.0}
    labelcoords {274.0 242.0}
    services {DefaultRoute UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('hping.sh', 'hulk.py', 'known_hosts.sh', )
	cmdup=('sh hping.sh', )
	cmddown=('killall hping3', )
	cmdval=('pidof hping', )
	meta=ddos
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:known_hosts.sh
	custom-command known_hosts.sh
	config {
	file:///home/fidelis/.core/configs/known_hots.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hulk.py
	custom-command hulk.py
	config {
	file:///home/fidelis/.core/configs/hulk.py
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hping.sh
	custom-command hping.sh
	config {
	file:///home/fidelis/.core/configs/hping.sh
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('syn.py', 'smurf.py', 'sf.py', )
	cmdup=
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:sf.py
	custom-command sf.py
	config {
	file:///home/fidelis/.core/configs/sf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:smurf.py
	custom-command smurf.py
	config {
	file:///home/fidelis/.core/configs/smurf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:syn.py
	custom-command syn.py
	config {
	file:///home/fidelis/.core/configs/syn.py
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
    interface-peer {eth0 n32}
}

node n15 {
    type router
    model PC
    network-config {
	hostname zumbi-11
	!
	interface eth0
	 ip address 10.0.1.23/24
	 ipv6 address 2001:2::23/64
	!
    }
    canvas c1
    iconcoords {134.0 348.0}
    labelcoords {134.0 321.0}
    services {DefaultRoute UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('hping.sh', 'hulk.py', 'known_hosts.sh', )
	cmdup=('sh hping.sh', )
	cmddown=('killall hping3', )
	cmdval=('pidof hping', )
	meta=ddos
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:known_hosts.sh
	custom-command known_hosts.sh
	config {
	file:///home/fidelis/.core/configs/known_hots.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hulk.py
	custom-command hulk.py
	config {
	file:///home/fidelis/.core/configs/hulk.py
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hping.sh
	custom-command hping.sh
	config {
	file:///home/fidelis/.core/configs/hping.sh
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('syn.py', 'smurf.py', 'sf.py', )
	cmdup=
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:sf.py
	custom-command sf.py
	config {
	file:///home/fidelis/.core/configs/sf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:smurf.py
	custom-command smurf.py
	config {
	file:///home/fidelis/.core/configs/smurf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:syn.py
	custom-command syn.py
	config {
	file:///home/fidelis/.core/configs/syn.py
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
    interface-peer {eth0 n32}
}

node n18 {
    type router
    model PC
    network-config {
	hostname Agente
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {965.0 583.0}
    labelcoords {918.0 580.0}
    interface-peer {eth0 n5}
    services {DefaultRoute StaticRoute DHCPClient UserDefined Firewall}
    custom-config {
	custom-config-id service:Firewall
	custom-command Firewall
	config {
	dirs=('/irs=(/home/fidelis/.core/configs', )
	files=('status.sh', )
	startidx=80
	cmdup=('sh status.sh', )
	cmddown=('killall status.sh', )
	meta=starttime=10
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:Firewall:status.sh
	custom-command status.sh
	config {
	#!/bin/bash
	
	#echo "" > /tmp/apache.dat 
	printf "status\tctime\t\trtime\t\tuptime\tmemoria\tcpu\ttacc\ttkb\n" > /tmp/apache.dat 
	
	for x in `seq 1 1 305`
	do
	
	# monit
	lynx -dump -error_file=/tmp/x$$ http://192.168.42.65:2812 &>/dev/null
	MONIT=`awk '/STATUS/{print $2}' /tmp/x$$ 2>/dev/null`
	if [ $? != 0 ]; then
	   	echo "site is down"
	        STATUS=`echo 0 | awk '{printf "%s\t", $1}'`
	        MEM=`echo 0 | awk '{printf "%s\t", $1}'`
	        CPU=`echo 0 | awk '{printf "%s\t", $1}'`
	        UPTIME=`uptime`
	else
	      MONIT=$(lynx -dump http://192.168.42.65:2812 2>&1 | grep '\[7]') 
	      
	      STATUS=`echo $MONIT | awk '{print $2}'`
	      if [ $STATUS = "OK" ]
	      then 
	          STATUS=`echo 1 | awk '{printf "%s\t", $1}'`
	          MEM=`echo $MONIT | awk '{printf "%s\t", $6}'`
		  CPU=`echo $MONIT | awk '{printf "%s\t", $5}'`
	      else
	          STATUS=`echo 0 | awk '{printf "%s\t", $1}'`
	          MEM=`echo 0 | awk '{printf "%s\t", $1}'`
		  CPU=`echo 0 | awk '{printf "%s\t", $1}'`
	      fi
	      
		# echo '' >> svstatus.dat && 
		SRVSTATUS=$(lynx -dump http://192.168.42.65/server-status?auto 2>&1) # | grep Load | awk '{print $2}' | perl -p -e 's/\n/ $2/')
	
		UPTIME=`printf %s "$SRVSTATUS" | grep '[U]ptime' | tail -n 1 | awk '{printf "%s\t", $2}'`
		TACC=`printf %s "$SRVSTATUS" | grep '[T]otal' | grep -m1 -e "Acc" | awk '{printf "%s\t", $3}'`
		TKB=`printf %s "$SRVSTATUS" | grep '[T]otal' | grep -m1 -e "kB" | awk '{printf "%s\t", $3}'`
		CTIME=`printf %s "$SRVSTATUS" | grep '[T]ime' | grep -m1 -e "Curr" | awk '{printf "%s\t", $4}'`
		RTIME=`printf %s "$SRVSTATUS" | grep '[T]ime' | grep -m1 -e "Rest" | awk '{printf "%s\t", $4}'`
	
	        echo "$CTIME$MONIT" >> /tmp/monit.dat
	        
	fi
	 echo "$STATUS$CTIME$RTIME$UPTIME$MEM$CPU$TACC$TKB" >> /tmp/apache.dat
	sleep 1
	done
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('monitor.sh', )
	startidx=50
	cmdup=('sh monitor.sh', )
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:monitor.sh
	custom-command monitor.sh
	config {
	file:///home/fidelis/.core/configs/monitor.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('ping.sh', )
	cmdup=('sh ping.sh', )
	cmddown=('killall ping.sh', )
	cmdval=('pidof ping.sh', )
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:ping.sh
	custom-command ping.sh
	config {
	#!/bin/bash
	echo " " > /tmp/ping.txt
	ping 192.168.42.65 -i 1 >> /tmp/ping.txt
	}
    }
    custom-image /home/fidelis/.core/trace/imgs/agent.png
}

node n8 {
    type router
    model PC
    network-config {
	hostname zumbi-12
	!
	interface eth0
	 ip address 10.0.1.27/24
	 ipv6 address 2001:2::27/64
	!
    }
    canvas c1
    iconcoords {197.0 401.0}
    labelcoords {201.0 377.0}
    services {DefaultRoute UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('hping.sh', 'hulk.py', 'known_hosts.sh', )
	cmdup=('sh hping.sh', )
	cmddown=('killall hping3', )
	cmdval=('pidof hping', )
	meta=ddos
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:known_hosts.sh
	custom-command known_hosts.sh
	config {
	file:///home/fidelis/.core/configs/known_hots.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hulk.py
	custom-command hulk.py
	config {
	file:///home/fidelis/.core/configs/hulk.py
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hping.sh
	custom-command hping.sh
	config {
	file:///home/fidelis/.core/configs/hping.sh
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('syn.py', 'smurf.py', 'sf.py', )
	cmdup=
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:sf.py
	custom-command sf.py
	config {
	file:///home/fidelis/.core/configs/sf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:smurf.py
	custom-command smurf.py
	config {
	file:///home/fidelis/.core/configs/smurf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:syn.py
	custom-command syn.py
	config {
	file:///home/fidelis/.core/configs/syn.py
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
    interface-peer {eth0 n32}
}

node n19 {
    type router
    model PC
    network-config {
	hostname zumbi-7
	!
	interface eth0
	 ip address 10.0.2.27/24
	 ipv6 address 2001:1::26/64
	!
    }
    canvas c1
    iconcoords {593.0 55.0}
    labelcoords {593.0 28.0}
    services {DefaultRoute UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('hping.sh', 'hulk.py', 'known_hosts.sh', )
	cmdup=('sh hping.sh', )
	cmddown=('killall hping3', )
	cmdval=('pidof hping', )
	meta=ddos
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:known_hosts.sh
	custom-command known_hosts.sh
	config {
	file:///home/fidelis/.core/configs/known_hots.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hulk.py
	custom-command hulk.py
	config {
	file:///home/fidelis/.core/configs/hulk.py
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hping.sh
	custom-command hping.sh
	config {
	file:///home/fidelis/.core/configs/hping.sh
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('syn.py', 'smurf.py', 'sf.py', )
	cmdup=
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:sf.py
	custom-command sf.py
	config {
	file:///home/fidelis/.core/configs/sf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:smurf.py
	custom-command smurf.py
	config {
	file:///home/fidelis/.core/configs/smurf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:syn.py
	custom-command syn.py
	config {
	file:///home/fidelis/.core/configs/syn.py
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
    interface-peer {eth0 n4}
}

node n20 {
    type router
    model PC
    network-config {
	hostname zumbi-15
	!
	interface eth0
	 ip address 10.0.1.24/24
	 ipv6 address 2001:2::24/64
	!
    }
    canvas c1
    iconcoords {340.0 462.0}
    labelcoords {340.0 435.0}
    services {DefaultRoute UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('hping.sh', 'hulk.py', 'known_hosts.sh', )
	cmdup=('sh hping.sh', )
	cmddown=('killall hping3', )
	cmdval=('pidof hping', )
	meta=ddos
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:known_hosts.sh
	custom-command known_hosts.sh
	config {
	file:///home/fidelis/.core/configs/known_hots.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hulk.py
	custom-command hulk.py
	config {
	file:///home/fidelis/.core/configs/hulk.py
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hping.sh
	custom-command hping.sh
	config {
	file:///home/fidelis/.core/configs/hping.sh
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('syn.py', 'smurf.py', 'sf.py', )
	cmdup=
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:sf.py
	custom-command sf.py
	config {
	file:///home/fidelis/.core/configs/sf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:smurf.py
	custom-command smurf.py
	config {
	file:///home/fidelis/.core/configs/smurf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:syn.py
	custom-command syn.py
	config {
	file:///home/fidelis/.core/configs/syn.py
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
    interface-peer {eth0 n32}
}

node n21 {
    type router
    model PC
    network-config {
	hostname zumbi-10
	!
	interface eth0
	 ip address 10.0.1.22/24
	 ipv6 address 2001:2::22/64
	!
    }
    canvas c1
    iconcoords {184.0 316.0}
    labelcoords {184.0 289.0}
    services {DefaultRoute UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('hping.sh', 'hulk.py', 'known_hosts.sh', )
	cmdup=('sh hping.sh', )
	cmddown=('killall hping3', )
	cmdval=('pidof hping', )
	meta=ddos
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:known_hosts.sh
	custom-command known_hosts.sh
	config {
	file:///home/fidelis/.core/configs/known_hots.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hulk.py
	custom-command hulk.py
	config {
	file:///home/fidelis/.core/configs/hulk.py
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hping.sh
	custom-command hping.sh
	config {
	file:///home/fidelis/.core/configs/hping.sh
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('syn.py', 'smurf.py', 'sf.py', )
	cmdup=
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:sf.py
	custom-command sf.py
	config {
	file:///home/fidelis/.core/configs/sf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:smurf.py
	custom-command smurf.py
	config {
	file:///home/fidelis/.core/configs/smurf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:syn.py
	custom-command syn.py
	config {
	file:///home/fidelis/.core/configs/syn.py
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
    interface-peer {eth0 n32}
}

node n22 {
    type router
    model PC
    network-config {
	hostname zumbi-13
	!
	interface eth0
	 ip address 10.0.1.26/24
	 ipv6 address 2001:2::26/64
	!
    }
    canvas c1
    iconcoords {243.0 420.0}
    labelcoords {243.0 393.0}
    services {DefaultRoute UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('hping.sh', 'hulk.py', 'known_hosts.sh', )
	cmdup=('sh hping.sh', )
	cmddown=('killall hping3', )
	cmdval=('pidof hping', )
	meta=ddos
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:known_hosts.sh
	custom-command known_hosts.sh
	config {
	file:///home/fidelis/.core/configs/known_hots.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hulk.py
	custom-command hulk.py
	config {
	file:///home/fidelis/.core/configs/hulk.py
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hping.sh
	custom-command hping.sh
	config {
	file:///home/fidelis/.core/configs/hping.sh
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('syn.py', 'smurf.py', 'sf.py', )
	cmdup=
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:sf.py
	custom-command sf.py
	config {
	file:///home/fidelis/.core/configs/sf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:smurf.py
	custom-command smurf.py
	config {
	file:///home/fidelis/.core/configs/smurf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:syn.py
	custom-command syn.py
	config {
	file:///home/fidelis/.core/configs/syn.py
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
    interface-peer {eth0 n32}
}

node n23 {
    type router
    model PC
    network-config {
	hostname zumbi-14
	!
	interface eth0
	 ip address 10.0.1.25/24
	 ipv6 address 2001:2::25/64
	!
    }
    canvas c1
    iconcoords {293.0 441.0}
    labelcoords {296.0 420.0}
    services {DefaultRoute UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('hping.sh', 'hulk.py', 'known_hosts.sh', )
	cmdup=('sh hping.sh', )
	cmddown=('killall hping3', )
	cmdval=('pidof hping', )
	meta=ddos
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:known_hosts.sh
	custom-command known_hosts.sh
	config {
	file:///home/fidelis/.core/configs/known_hots.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hulk.py
	custom-command hulk.py
	config {
	file:///home/fidelis/.core/configs/hulk.py
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hping.sh
	custom-command hping.sh
	config {
	file:///home/fidelis/.core/configs/hping.sh
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('syn.py', 'smurf.py', 'sf.py', )
	cmdup=
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:sf.py
	custom-command sf.py
	config {
	file:///home/fidelis/.core/configs/sf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:smurf.py
	custom-command smurf.py
	config {
	file:///home/fidelis/.core/configs/smurf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:syn.py
	custom-command syn.py
	config {
	file:///home/fidelis/.core/configs/syn.py
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
    interface-peer {eth0 n32}
}

node n24 {
    type router
    model PC
    network-config {
	hostname zumbi-2
	!
	interface eth0
	 ip address 10.0.2.23/24
	 ipv6 address 2001:1::23/64
	!
    }
    canvas c1
    iconcoords {279.0 57.0}
    labelcoords {279.0 30.0}
    services {DefaultRoute UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('hping.sh', 'hulk.py', 'known_hosts.sh', )
	cmdup=('sh hping.sh', )
	cmddown=('killall hping3', )
	cmdval=('pidof hping', )
	meta=ddos
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:known_hosts.sh
	custom-command known_hosts.sh
	config {
	file:///home/fidelis/.core/configs/known_hots.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hulk.py
	custom-command hulk.py
	config {
	file:///home/fidelis/.core/configs/hulk.py
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hping.sh
	custom-command hping.sh
	config {
	file:///home/fidelis/.core/configs/hping.sh
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('syn.py', 'smurf.py', 'sf.py', )
	cmdup=
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:sf.py
	custom-command sf.py
	config {
	file:///home/fidelis/.core/configs/sf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:smurf.py
	custom-command smurf.py
	config {
	file:///home/fidelis/.core/configs/smurf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:syn.py
	custom-command syn.py
	config {
	file:///home/fidelis/.core/configs/syn.py
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
    interface-peer {eth0 n4}
}

node n26 {
    type router
    model PC
    network-config {
	hostname zumbi-1
	!
	interface eth0
	 ip address 10.0.2.22/24
	 ipv6 address 2001:1::22/64
	!
    }
    canvas c1
    iconcoords {209.0 59.0}
    labelcoords {209.0 32.0}
    services {DefaultRoute UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('hping.sh', 'hulk.py', 'known_hosts.sh', )
	cmdup=('sh hping.sh', )
	cmddown=('killall hping3', )
	cmdval=('pidof hping', )
	meta=ddos
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:known_hosts.sh
	custom-command known_hosts.sh
	config {
	file:///home/fidelis/.core/configs/known_hots.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hulk.py
	custom-command hulk.py
	config {
	file:///home/fidelis/.core/configs/hulk.py
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hping.sh
	custom-command hping.sh
	config {
	file:///home/fidelis/.core/configs/hping.sh
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('syn.py', 'smurf.py', 'sf.py', )
	cmdup=
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:sf.py
	custom-command sf.py
	config {
	file:///home/fidelis/.core/configs/sf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:smurf.py
	custom-command smurf.py
	config {
	file:///home/fidelis/.core/configs/smurf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:syn.py
	custom-command syn.py
	config {
	file:///home/fidelis/.core/configs/syn.py
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
    interface-peer {eth0 n4}
}

node n27 {
    type router
    model PC
    network-config {
	hostname zumbi-6
	!
	interface eth0
	 ip address 10.0.2.26/24
	 ipv6 address 2001:1::25/64
	!
    }
    canvas c1
    iconcoords {533.0 56.0}
    labelcoords {533.0 29.0}
    services {DefaultRoute UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('hping.sh', 'hulk.py', 'known_hosts.sh', )
	cmdup=('sh hping.sh', )
	cmddown=('killall hping3', )
	cmdval=('pidof hping', )
	meta=ddos
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:known_hosts.sh
	custom-command known_hosts.sh
	config {
	file:///home/fidelis/.core/configs/known_hots.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hulk.py
	custom-command hulk.py
	config {
	file:///home/fidelis/.core/configs/hulk.py
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hping.sh
	custom-command hping.sh
	config {
	file:///home/fidelis/.core/configs/hping.sh
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('syn.py', 'smurf.py', 'sf.py', )
	cmdup=
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:sf.py
	custom-command sf.py
	config {
	file:///home/fidelis/.core/configs/sf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:smurf.py
	custom-command smurf.py
	config {
	file:///home/fidelis/.core/configs/smurf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:syn.py
	custom-command syn.py
	config {
	file:///home/fidelis/.core/configs/syn.py
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
    interface-peer {eth0 n4}
}

node n28 {
    type router
    model PC
    network-config {
	hostname zumbi-5
	!
	interface eth0
	 ip address 10.0.2.20/24
	 ipv6 address 2001:1::20/64
	!
    }
    canvas c1
    iconcoords {470.0 56.0}
    labelcoords {470.0 29.0}
    services {DefaultRoute UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('hping.sh', 'hulk.py', 'known_hosts.sh', )
	cmdup=('sh hping.sh', )
	cmddown=('killall hping3', )
	cmdval=('pidof hping', )
	meta=ddos
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:known_hosts.sh
	custom-command known_hosts.sh
	config {
	file:///home/fidelis/.core/configs/known_hots.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hulk.py
	custom-command hulk.py
	config {
	file:///home/fidelis/.core/configs/hulk.py
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hping.sh
	custom-command hping.sh
	config {
	file:///home/fidelis/.core/configs/hping.sh
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('syn.py', 'smurf.py', 'sf.py', )
	cmdup=
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:sf.py
	custom-command sf.py
	config {
	file:///home/fidelis/.core/configs/sf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:smurf.py
	custom-command smurf.py
	config {
	file:///home/fidelis/.core/configs/smurf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:syn.py
	custom-command syn.py
	config {
	file:///home/fidelis/.core/configs/syn.py
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
    interface-peer {eth0 n4}
}

node n3 {
    type lanswitch
    network-config {
	hostname S2
	!
    }
    canvas c1
    iconcoords {474.0 243.0}
    labelcoords {474.0 267.0}
    interface-peer {e0 n17}
    interface-peer {e1 n25}
}

node n11 {
    type router
    model PC
    network-config {
	hostname zumbi-19
	!
	interface eth0
	 ip address 10.0.3.23/24
	 ipv6 address 2001:3::23/64
	!
    }
    canvas c1
    iconcoords {402.0 607.0}
    labelcoords {402.0 580.0}
    services {DefaultRoute UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('hping.sh', 'hulk.py', 'known_hosts.sh', )
	cmdup=('sh hping.sh', )
	cmddown=('killall hping3', )
	cmdval=('pidof hping', )
	meta=ddos
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:known_hosts.sh
	custom-command known_hosts.sh
	config {
	file:///home/fidelis/.core/configs/known_hots.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hulk.py
	custom-command hulk.py
	config {
	file:///home/fidelis/.core/configs/hulk.py
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hping.sh
	custom-command hping.sh
	config {
	file:///home/fidelis/.core/configs/hping.sh
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('syn.py', 'smurf.py', 'sf.py', )
	cmdup=
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:sf.py
	custom-command sf.py
	config {
	file:///home/fidelis/.core/configs/sf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:smurf.py
	custom-command smurf.py
	config {
	file:///home/fidelis/.core/configs/smurf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:syn.py
	custom-command syn.py
	config {
	file:///home/fidelis/.core/configs/syn.py
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
    interface-peer {eth0 n34}
}

node n29 {
    type router
    model PC
    network-config {
	hostname zumbi-18
	!
	interface eth0
	 ip address 10.0.3.22/24
	 ipv6 address 2001:3::22/64
	!
    }
    canvas c1
    iconcoords {357.0 585.0}
    labelcoords {357.0 558.0}
    services {DefaultRoute UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('hping.sh', 'hulk.py', 'known_hosts.sh', )
	cmdup=('sh hping.sh', )
	cmddown=('killall hping3', )
	cmdval=('pidof hping', )
	meta=ddos
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:known_hosts.sh
	custom-command known_hosts.sh
	config {
	file:///home/fidelis/.core/configs/known_hots.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hulk.py
	custom-command hulk.py
	config {
	file:///home/fidelis/.core/configs/hulk.py
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hping.sh
	custom-command hping.sh
	config {
	file:///home/fidelis/.core/configs/hping.sh
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('syn.py', 'smurf.py', 'sf.py', )
	cmdup=
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:sf.py
	custom-command sf.py
	config {
	file:///home/fidelis/.core/configs/sf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:smurf.py
	custom-command smurf.py
	config {
	file:///home/fidelis/.core/configs/smurf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:syn.py
	custom-command syn.py
	config {
	file:///home/fidelis/.core/configs/syn.py
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
    interface-peer {eth0 n34}
}

node n30 {
    type router
    model PC
    network-config {
	hostname zumbi-17
	!
	interface eth0
	 ip address 10.0.3.21/24
	 ipv6 address 2001:3::21/64
	!
    }
    canvas c1
    iconcoords {311.0 567.0}
    labelcoords {311.0 540.0}
    services {DefaultRoute UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('hping.sh', 'hulk.py', 'known_hosts.sh', )
	cmdup=('sh hping.sh', )
	cmddown=('killall hping3', )
	cmdval=('pidof hping', )
	meta=ddos
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:known_hosts.sh
	custom-command known_hosts.sh
	config {
	file:///home/fidelis/.core/configs/known_hots.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hulk.py
	custom-command hulk.py
	config {
	file:///home/fidelis/.core/configs/hulk.py
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hping.sh
	custom-command hping.sh
	config {
	file:///home/fidelis/.core/configs/hping.sh
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('syn.py', 'smurf.py', 'sf.py', )
	cmdup=
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:sf.py
	custom-command sf.py
	config {
	file:///home/fidelis/.core/configs/sf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:smurf.py
	custom-command smurf.py
	config {
	file:///home/fidelis/.core/configs/smurf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:syn.py
	custom-command syn.py
	config {
	file:///home/fidelis/.core/configs/syn.py
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
    interface-peer {eth0 n34}
}

node n31 {
    type router
    model PC
    network-config {
	hostname zumbi-16
	!
	interface eth0
	 ip address 10.0.3.20/24
	 ipv6 address 2001:3::20/64
	!
    }
    canvas c1
    iconcoords {267.0 551.0}
    labelcoords {267.0 524.0}
    services {DefaultRoute UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('hping.sh', 'hulk.py', 'known_hosts.sh', )
	cmdup=('sh hping.sh', )
	cmddown=('killall hping3', )
	cmdval=('pidof hping', )
	meta=ddos
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:known_hosts.sh
	custom-command known_hosts.sh
	config {
	file:///home/fidelis/.core/configs/known_hots.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hulk.py
	custom-command hulk.py
	config {
	file:///home/fidelis/.core/configs/hulk.py
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hping.sh
	custom-command hping.sh
	config {
	file:///home/fidelis/.core/configs/hping.sh
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('syn.py', 'smurf.py', 'sf.py', )
	cmdup=
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:sf.py
	custom-command sf.py
	config {
	file:///home/fidelis/.core/configs/sf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:smurf.py
	custom-command smurf.py
	config {
	file:///home/fidelis/.core/configs/smurf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:syn.py
	custom-command syn.py
	config {
	file:///home/fidelis/.core/configs/syn.py
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
    interface-peer {eth0 n34}
}

node n33 {
    type router
    model PC
    network-config {
	hostname zumbi-20
	!
	interface eth0
	 ip address 10.0.3.24/24
	 ipv6 address 2001:3::24/64
	!
    }
    canvas c1
    iconcoords {445.0 627.0}
    labelcoords {445.0 600.0}
    services {DefaultRoute UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('hping.sh', 'hulk.py', 'known_hosts.sh', )
	cmdup=('sh hping.sh', )
	cmddown=('killall hping3', )
	cmdval=('pidof hping', )
	meta=ddos
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:known_hosts.sh
	custom-command known_hosts.sh
	config {
	file:///home/fidelis/.core/configs/known_hots.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hulk.py
	custom-command hulk.py
	config {
	file:///home/fidelis/.core/configs/hulk.py
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hping.sh
	custom-command hping.sh
	config {
	file:///home/fidelis/.core/configs/hping.sh
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('syn.py', 'smurf.py', 'sf.py', )
	cmdup=
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:sf.py
	custom-command sf.py
	config {
	file:///home/fidelis/.core/configs/sf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:smurf.py
	custom-command smurf.py
	config {
	file:///home/fidelis/.core/configs/smurf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:syn.py
	custom-command syn.py
	config {
	file:///home/fidelis/.core/configs/syn.py
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
    interface-peer {eth0 n34}
}

node n34 {
    type lanswitch
    network-config {
	hostname S1
	!
    }
    canvas c1
    iconcoords {477.0 481.0}
    labelcoords {477.0 505.0}
    interface-peer {e1 n31}
    interface-peer {e2 n30}
    interface-peer {e3 n29}
    interface-peer {e4 n11}
    interface-peer {e5 n33}
    interface-peer {e0 n35}
    interface-peer {e6 n36}
    interface-peer {e7 n37}
    interface-peer {e8 n38}
    interface-peer {e9 n39}
    interface-peer {e10 n17}
}

node n32 {
    type lanswitch
    network-config {
	hostname S4
	!
    }
    canvas c1
    iconcoords {473.0 329.0}
    labelcoords {473.0 353.0}
    interface-peer {e1 n14}
    interface-peer {e2 n13}
    interface-peer {e3 n21}
    interface-peer {e4 n15}
    interface-peer {e6 n23}
    interface-peer {e7 n22}
    interface-peer {e8 n8}
    interface-peer {e0 n20}
    interface-peer {e5 n17}
}

node n35 {
    type router
    model PC
    network-config {
	hostname zumbi-24
	!
	interface eth0
	 ip address 10.0.3.25/24
	 ipv6 address 2001:3::25/64
	!
    }
    canvas c1
    iconcoords {637.0 620.0}
    labelcoords {637.0 593.0}
    services {DefaultRoute UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('hping.sh', 'hulk.py', 'known_hosts.sh', )
	cmdup=('sh hping.sh', )
	cmddown=('killall hping3', )
	cmdval=('pidof hping', )
	meta=ddos
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:known_hosts.sh
	custom-command known_hosts.sh
	config {
	file:///home/fidelis/.core/configs/known_hots.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hulk.py
	custom-command hulk.py
	config {
	file:///home/fidelis/.core/configs/hulk.py
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hping.sh
	custom-command hping.sh
	config {
	file:///home/fidelis/.core/configs/hping.sh
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('syn.py', 'smurf.py', 'sf.py', )
	cmdup=
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:sf.py
	custom-command sf.py
	config {
	file:///home/fidelis/.core/configs/sf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:smurf.py
	custom-command smurf.py
	config {
	file:///home/fidelis/.core/configs/smurf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:syn.py
	custom-command syn.py
	config {
	file:///home/fidelis/.core/configs/syn.py
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
    interface-peer {eth0 n34}
}

node n36 {
    type router
    model PC
    network-config {
	hostname zumbi-23
	!
	interface eth0
	 ip address 10.0.3.26/24
	 ipv6 address 2001:3::26/64
	!
    }
    canvas c1
    iconcoords {592.0 598.0}
    labelcoords {592.0 571.0}
    services {DefaultRoute UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('hping.sh', 'hulk.py', 'known_hosts.sh', )
	cmdup=('sh hping.sh', )
	cmddown=('killall hping3', )
	cmdval=('pidof hping', )
	meta=ddos
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:known_hosts.sh
	custom-command known_hosts.sh
	config {
	file:///home/fidelis/.core/configs/known_hots.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hulk.py
	custom-command hulk.py
	config {
	file:///home/fidelis/.core/configs/hulk.py
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hping.sh
	custom-command hping.sh
	config {
	file:///home/fidelis/.core/configs/hping.sh
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('syn.py', 'smurf.py', 'sf.py', )
	cmdup=
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:sf.py
	custom-command sf.py
	config {
	file:///home/fidelis/.core/configs/sf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:smurf.py
	custom-command smurf.py
	config {
	file:///home/fidelis/.core/configs/smurf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:syn.py
	custom-command syn.py
	config {
	file:///home/fidelis/.core/configs/syn.py
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
    interface-peer {eth0 n34}
}

node n37 {
    type router
    model PC
    network-config {
	hostname zumbi-22
	!
	interface eth0
	 ip address 10.0.3.27/24
	 ipv6 address 2001:3::27/64
	!
    }
    canvas c1
    iconcoords {546.0 580.0}
    labelcoords {546.0 553.0}
    services {DefaultRoute UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('hping.sh', 'hulk.py', 'known_hosts.sh', )
	cmdup=('sh hping.sh', )
	cmddown=('killall hping3', )
	cmdval=('pidof hping', )
	meta=ddos
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:known_hosts.sh
	custom-command known_hosts.sh
	config {
	file:///home/fidelis/.core/configs/known_hots.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hulk.py
	custom-command hulk.py
	config {
	file:///home/fidelis/.core/configs/hulk.py
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hping.sh
	custom-command hping.sh
	config {
	file:///home/fidelis/.core/configs/hping.sh
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('syn.py', 'smurf.py', 'sf.py', )
	cmdup=
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:sf.py
	custom-command sf.py
	config {
	file:///home/fidelis/.core/configs/sf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:smurf.py
	custom-command smurf.py
	config {
	file:///home/fidelis/.core/configs/smurf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:syn.py
	custom-command syn.py
	config {
	file:///home/fidelis/.core/configs/syn.py
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
    interface-peer {eth0 n34}
}

node n38 {
    type router
    model PC
    network-config {
	hostname zumbi-21
	!
	interface eth0
	 ip address 10.0.3.28/24
	 ipv6 address 2001:3::28/64
	!
    }
    canvas c1
    iconcoords {502.0 564.0}
    labelcoords {502.0 537.0}
    services {DefaultRoute UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('hping.sh', 'hulk.py', 'known_hosts.sh', )
	cmdup=('sh hping.sh', )
	cmddown=('killall hping3', )
	cmdval=('pidof hping', )
	meta=ddos
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:known_hosts.sh
	custom-command known_hosts.sh
	config {
	file:///home/fidelis/.core/configs/known_hots.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hulk.py
	custom-command hulk.py
	config {
	file:///home/fidelis/.core/configs/hulk.py
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hping.sh
	custom-command hping.sh
	config {
	file:///home/fidelis/.core/configs/hping.sh
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('syn.py', 'smurf.py', 'sf.py', )
	cmdup=
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:sf.py
	custom-command sf.py
	config {
	file:///home/fidelis/.core/configs/sf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:smurf.py
	custom-command smurf.py
	config {
	file:///home/fidelis/.core/configs/smurf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:syn.py
	custom-command syn.py
	config {
	file:///home/fidelis/.core/configs/syn.py
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
    interface-peer {eth0 n34}
}

node n39 {
    type router
    model PC
    network-config {
	hostname zumbi-25
	!
	interface eth0
	 ip address 10.0.3.29/24
	 ipv6 address 2001:3::29/64
	!
    }
    canvas c1
    iconcoords {680.0 640.0}
    labelcoords {680.0 613.0}
    services {DefaultRoute UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('hping.sh', 'hulk.py', 'known_hosts.sh', )
	cmdup=('sh hping.sh', )
	cmddown=('killall hping3', )
	cmdval=('pidof hping', )
	meta=ddos
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:known_hosts.sh
	custom-command known_hosts.sh
	config {
	file:///home/fidelis/.core/configs/known_hots.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hulk.py
	custom-command hulk.py
	config {
	file:///home/fidelis/.core/configs/hulk.py
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hping.sh
	custom-command hping.sh
	config {
	file:///home/fidelis/.core/configs/hping.sh
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('syn.py', 'smurf.py', 'sf.py', )
	cmdup=
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:sf.py
	custom-command sf.py
	config {
	file:///home/fidelis/.core/configs/sf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:smurf.py
	custom-command smurf.py
	config {
	file:///home/fidelis/.core/configs/smurf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:syn.py
	custom-command syn.py
	config {
	file:///home/fidelis/.core/configs/syn.py
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
    interface-peer {eth0 n34}
}

node n41 {
    type router
    model PC
    network-config {
	hostname zumbi-26
	!
    }
    canvas c1
    iconcoords {319.0 247.0}
    labelcoords {319.0 220.0}
    services {DefaultRoute UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('hping.sh', 'hulk.py', 'known_hosts.sh', )
	cmdup=('sh hping.sh', )
	cmddown=('killall hping3', )
	cmdval=('pidof hping', )
	meta=ddos
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:known_hosts.sh
	custom-command known_hosts.sh
	config {
	file:///home/fidelis/.core/configs/known_hots.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hulk.py
	custom-command hulk.py
	config {
	file:///home/fidelis/.core/configs/hulk.py
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hping.sh
	custom-command hping.sh
	config {
	file:///home/fidelis/.core/configs/hping.sh
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('syn.py', 'smurf.py', 'sf.py', )
	cmdup=
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:sf.py
	custom-command sf.py
	config {
	file:///home/fidelis/.core/configs/sf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:smurf.py
	custom-command smurf.py
	config {
	file:///home/fidelis/.core/configs/smurf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:syn.py
	custom-command syn.py
	config {
	file:///home/fidelis/.core/configs/syn.py
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
}

node n42 {
    type router
    model PC
    network-config {
	hostname zumbi-27
	!
    }
    canvas c1
    iconcoords {362.0 267.0}
    labelcoords {362.0 240.0}
    services {DefaultRoute UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('hping.sh', 'hulk.py', 'known_hosts.sh', )
	cmdup=('sh hping.sh', )
	cmddown=('killall hping3', )
	cmdval=('pidof hping', )
	meta=ddos
	starttime=10
	}
    }
    custom-config {
	custom-config-id service:UserDefined:known_hosts.sh
	custom-command known_hosts.sh
	config {
	file:///home/fidelis/.core/configs/known_hots.sh
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hulk.py
	custom-command hulk.py
	config {
	file:///home/fidelis/.core/configs/hulk.py
	}
    }
    custom-config {
	custom-config-id service:UserDefined:hping.sh
	custom-command hping.sh
	config {
	file:///home/fidelis/.core/configs/hping.sh
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	dirs=('/home/fidelis/.core/configs', )
	files=('syn.py', 'smurf.py', 'sf.py', )
	cmdup=
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:sf.py
	custom-command sf.py
	config {
	file:///home/fidelis/.core/configs/sf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:smurf.py
	custom-command smurf.py
	config {
	file:///home/fidelis/.core/configs/smurf.py
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:syn.py
	custom-command syn.py
	config {
	file:///home/fidelis/.core/configs/syn.py
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	files=('startsshd.sh', '/etc/ssh/sshd_config', )
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
}

link l11 {
    nodes {n6 n1}
}

link l12 {
    nodes {n1 n16}
}

link l13 {
    nodes {n6 n17}
}

link l14 {
    nodes {n17 n16}
}

link l1 {
    nodes {n1 n2}
}

link l6 {
    nodes {n16 n5}
}

link l4 {
    nodes {n5 n9}
}

link l9 {
    nodes {n1 n10}
}

link l3 {
    nodes {n5 n18}
    bandwidth 0
}

link l16 {
    nodes {n27 n4}
    bandwidth 0
}

link l17 {
    nodes {n19 n4}
    bandwidth 0
}

link l19 {
    nodes {n31 n34}
    bandwidth 0
}

link l20 {
    nodes {n30 n34}
    bandwidth 0
}

link l21 {
    nodes {n29 n34}
    bandwidth 0
}

link l22 {
    nodes {n11 n34}
    bandwidth 0
}

link l23 {
    nodes {n33 n34}
    bandwidth 0
}

link l25 {
    nodes {n14 n32}
    bandwidth 0
}

link l26 {
    nodes {n13 n32}
    bandwidth 0
}

link l27 {
    nodes {n21 n32}
    bandwidth 0
}

link l29 {
    nodes {n15 n32}
    bandwidth 0
}

link l31 {
    nodes {n32 n23}
    bandwidth 0
}

link l32 {
    nodes {n32 n22}
    bandwidth 0
}

link l33 {
    nodes {n32 n8}
    bandwidth 0
}

link l34 {
    nodes {n3 n17}
    bandwidth 0
}

link l7 {
    nodes {n25 n3}
    bandwidth 0
}

link l28 {
    nodes {n35 n34}
    bandwidth 0
}

link l35 {
    nodes {n36 n34}
    bandwidth 0
}

link l36 {
    nodes {n37 n34}
    bandwidth 0
}

link l37 {
    nodes {n38 n34}
    bandwidth 0
}

link l38 {
    nodes {n39 n34}
    bandwidth 0
}

link l2 {
    nodes {n4 n6}
    bandwidth 0
}

link l5 {
    nodes {n28 n4}
    bandwidth 0
}

link l8 {
    nodes {n7 n4}
    bandwidth 0
}

link l10 {
    nodes {n20 n32}
    bandwidth 0
}

link l15 {
    nodes {n26 n4}
    bandwidth 0
}

link l18 {
    nodes {n24 n4}
    bandwidth 0
}

link l24 {
    nodes {n12 n4}
    bandwidth 0
}

link l30 {
    nodes {n32 n17}
    bandwidth 0
}

link l39 {
    nodes {n17 n34}
    bandwidth 0
}

annotation a1 {
    iconcoords {549 91 863 513}
    type oval
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #CFCFFF
    width 3
    border #ffffae
    canvas c1
}

annotation a3 {
    iconcoords {607.0 527.0}
    type text
    label {Roteamento Ipv4 estático}
    labelcolor #dc0e00
    fontfamily {Arial}
    fontsize {12}
    effects {bold}
    canvas c1
}

annotation a4 {
    type text
    iconcoords {740.0 527.0}
    label {}
    canvas c1
}

annotation a5 {
    type text
    iconcoords {760.0 503.0}
    label {}
    canvas c1
}

annotation a6 {
    iconcoords {9 20 91 649}
    type rectangle
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {20}
    color #e6d61c
    width 0
    border black
    rad 0
    effects {bold}
    canvas c1
}

annotation a7 {
    type text
    iconcoords {63.0 334.0}
    label {}
    canvas c1
}

annotation a8 {
    type text
    iconcoords {965.0 347.0}
    label {}
    canvas c1
}

annotation a9 {
    iconcoords {17.0 61.0}
    type text
    label {DDOS}
    labelcolor black
    fontfamily {Arial}
    fontsize {28}
    effects {bold}
    canvas c1
}

annotation a10 {
    iconcoords {1086.0 50.0}
    type text
    label {Rede de Serviços}
    labelcolor #dc0000
    fontfamily {Arial}
    fontsize {12}
    effects {bold}
    canvas c1
}

annotation a11 {
    type text
    iconcoords {889.0 110.0}
    label {}
    canvas c1
}

annotation a13 {
    iconcoords {18.0 92.0}
    type text
    label {Rede do Atacante}
    labelcolor #dc0000
    fontfamily {Arial}
    fontsize {12}
    effects {bold}
    canvas c1
}

annotation a15 {
    iconcoords {917.0 515.0}
    type text
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {10}
    canvas c1
}

annotation a14 {
    iconcoords {1104.0 242.0}
    type text
    label {Servidor Apache Real}
    labelcolor #803028
    fontfamily {Arial}
    fontsize {8}
    effects {bold}
    canvas c1
}

annotation a16 {
    iconcoords {1093.0 455.0}
    type text
    label {Smartphone (Real)}
    labelcolor #803028
    fontfamily {Arial}
    fontsize {8}
    effects {bold italic}
    canvas c1
}

annotation a20 {
    iconcoords {687.0 489.0}
    type text
    label {NAT}
    labelcolor #dc0e00
    fontfamily {Arial}
    fontsize {12}
    effects {bold}
    canvas c1
}

annotation a22 {
    iconcoords {880.0 631.0}
    type text
    label {Icmp/ http / Status-Apache}
    labelcolor #8e0000
    fontfamily {Arial}
    fontsize {9}
    effects {bold}
    canvas c1
}

annotation a18 {
    iconcoords {1029.0 539.0}
    type text
    label {Rede do cliente Virtual/ Real}
    labelcolor #dc0000
    fontfamily {Arial}
    fontsize {11}
    effects {bold}
    canvas c1
}

annotation a2 {
    iconcoords {981.0 96.0}
    type text
    label {Servidor Apache Virtual}
    labelcolor #803028
    fontfamily {Arial}
    fontsize {8}
    effects {bold}
    canvas c1
}

canvas c1 {
    name {Canvas1}
    refpt {0 0 47.5791667 -122.132322 2.0}
    scale {150.0}
    size {1280 750}
}

option global {
    interface_names no
    ip_addresses no
    ipv6_addresses no
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid no
    traffic_start 0
}

option session {
    controlnet=
    controlnet_updown_script=
    enablerj45=0
    enablesdt=1
    preservedir=0
    sdturl=tcp://127.0.0.1:50000/
}

